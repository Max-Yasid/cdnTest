var T = Object.defineProperty;
var B = (o, s, t) => s in o ? T(o, s, { enumerable: !0, configurable: !0, writable: !0, value: t }) : o[s] = t;
var r = (o, s, t) => (B(o, typeof s != "symbol" ? s + "" : s, t), t);
class H {
  constructor() {
    r(this, "typography", {
      primary: "'Trebuchet MS', sans-serif"
    });
    r(this, "colors", { primary: "rgb(59, 129, 246)" });
    r(this, "defaultIcon", `
  <svg viewBox="0 0 24 24"><path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path></svg>
  `);
    r(this, "customIcon", "");
  }
}
const c = new H();
class d extends HTMLElement {
  setStyles(s) {
    Object.keys(s).forEach((e) => {
      this.style[e] = s[e];
    });
  }
}
const I = "onbotgo-box";
class l extends d {
  constructor() {
    super(), this.setStyles({ display: "inline-block", width: "100%" });
  }
}
l.tag = I;
const u = "onbotgo-bubble";
class x extends d {
  constructor(s) {
    super(), this.innerHTML = s, this.innerHTML = this.isIconValid(s) ? s : c.defaultIcon;
  }
  isIconValid(s) {
    var e, i, n, a;
    if (!s)
      return !1;
    const t = new l();
    if (t.innerHTML = s, !["svg", "i", "img"].includes((i = (e = t.children[0]) == null ? void 0 : e.tagName) == null ? void 0 : i.toLowerCase()))
      return console.error(`node is not valid.
 allowed nodes: "svg", "i", "img"`), !1;
    for (let C = 0; C < t.childNodes.length; C++) {
      const h = (a = (n = t.childNodes[C]) == null ? void 0 : n.tagName) == null ? void 0 : a.toLowerCase();
      if (["script"].includes(h))
        return console.error(`Element "<${h}>" is not valid.`), !1;
    }
    return !0;
  }
}
x.tag = u;
const L = (o) => ({
  [u]: {
    display: "grid",
    "place-items": "center",
    width: "48px",
    height: "48px",
    "background-color": o.colors.primary,
    fill: "transparent",
    "border-radius": "100px",
    transition: "transform 0.1s linear"
  },
  [`${u}:hover`]: {
    transform: "scale(1.1)"
  },
  [`${u} > svg`]: {
    width: "28px",
    height: "28px",
    stroke: "white",
    "stroke-width": "2px",
    "border-image-width": "2"
  }
}), y = "onbotgo-chatinput";
class w extends d {
  constructor() {
    super();
    r(this, "defaultStyles", {
      height: "8%",
      width: "100%",
      display: "grid",
      gridTemplateColumns: "10fr 1fr",
      alignItems: "center",
      boxShadow: "0 2px 6px -1px rgba(0,0,0,.1)"
    });
    r(this, "input", document.createElement("input"));
    r(this, "sendIcon", new l());
    this.setStyles(this.defaultStyles), this.input, this.input.style.maxWidth = "calc(100vw - 129px - 0px)", this.input.style.fontFamily = c.typography.primary, this.input.type = "text", this.input.placeholder = "Escribe un mensaje", this.sendIcon.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="19px" class="send-icon flex " ><path d="M476.59 227.05l-.16-.07L49.35 49.84A23.56 23.56 0 0027.14 52 24.65 24.65 0 0016 72.59v113.29a24 24 0 0019.52 23.57l232.93 43.07a4 4 0 010 7.86L35.53 303.45A24 24 0 0016 327v113.31A23.57 23.57 0 0026.59 460a23.94 23.94 0 0013.22 4 24.55 24.55 0 009.52-1.93L476.4 285.94l.19-.09a32 32 0 000-58.8z"></path></svg>', this.appendChild(this.input), this.appendChild(this.sendIcon);
  }
  onSubmit(t) {
    this.sendIcon.onclick = (e) => t(this.input.value), this.input.onkeydown = (e) => {
      ["13", "Enter"].includes(e.key) && (t(this.input.value), this.input.value = "");
    };
  }
}
w.tag = y;
const $ = (o) => ({
  [`${y} > input`]: {
    "border-radius": "6px",
    outline: "none",
    border: "none",
    height: "100%",
    padding: "0 10px"
  },
  [`${y} svg`]: {
    cursor: "pointer",
    fill: o.colors.primary
  }
}), p = "onbotgo-chatmessage";
class v extends d {
  constructor(t) {
    super();
    r(this, "messageBox", new l());
    this.setStyles({
      width: "100%",
      display: "flex",
      minHeight: "max(45px, fit-content)",
      justifyContent: t.type === "userMessage" ? "flex-end" : "flex-start"
    });
    const e = {
      userMessage: "from-user",
      apiMessage: "from-chatbot",
      loadingMessage: "loading-api-message"
    };
    this.messageBox.setStyles({
      width: "fit-content",
      height: "fit-content",
      borderRadius: "6px",
      alignItems: "center",
      padding: "15px 15px",
      fontFamily: c.typography.primary,
      color: t.type === "userMessage" ? "white" : "black"
    }), this.messageBox.classList.add(e[t.type]), t.type === "userMessage" ? this.messageBox.innerText = t.message : t.type === "loadingMessage" ? (this.messageBox.appendChild(this.loadingMessageElement), this.messageBox.appendChild(this.createSoftBackgroundColor())) : (this.messageBox.innerHTML = t.message, this.messageBox.appendChild(this.createSoftBackgroundColor())), this.appendChild(this.messageBox);
  }
  get loadingMessageElement() {
    const t = new l(), e = new l(), i = new l(), n = new l();
    return t.setStyles({
      alignItems: "center",
      display: "flex",
      height: "17px",
      gap: "5px"
    }), [e, i, n].forEach(
      (a) => a.setStyles({
        transform: "translateY(2px)",
        backgroundColor: c.colors.primary,
        borderRadius: "50px",
        height: "10px",
        verticalAlign: "middle",
        width: "10px",
        display: "inline-block"
      })
    ), [e, i, n].forEach(
      (a, C) => console.log(C, C * 200) || a.animate([{ transform: "translateY(-5px)", opacity: 0.2 }], {
        direction: "alternate",
        delay: C * 200,
        duration: 500,
        iterations: 1 / 0
      })
    ), t.appendChild(i), t.appendChild(n), t.appendChild(e), t;
  }
  createSoftBackgroundColor() {
    const t = new l();
    return t.classList.add("bg-semi-transp"), t;
  }
}
v.tag = p;
const _ = (o) => ({
  [`${p} > .from-chatbot`]: {
    width: "100%",
    content: "",
    overflow: "hidden",
    position: "relative",
    "max-width": "75%",
    "z-index": 1
  },
  [`${p} .bg-semi-transp`]: {
    position: "absolute",
    width: "100%",
    height: "100%",
    opacity: ".1",
    top: 0,
    "z-index": "-1",
    left: 0,
    "background-color": o.colors.primary
  },
  [`${p} > .from-user`]: {
    "margin-right": "15px",
    "max-width": "70%",
    "background-color": o.colors.primary
  },
  [`${p} > .loading-api-message`]: {
    position: "relative",
    "z-index": 1,
    overflow: "hidden"
  }
});
class F {
  constructor() {
    r(this, "gpt_url", "https://api-whatsapp-dev.mibot.cl:7070");
    r(this, "chatflowID", "");
  }
}
const b = new F(), z = async (o) => await fetch(
  `${b.gpt_url}/v1/internal-prediction/${b.chatflowID}`,
  {
    headers: {
      "Content-Type": "application/json"
    },
    method: "POST",
    body: JSON.stringify(o)
  }
).then((s) => s.json());
class S extends HTMLElement {
  constructor(t) {
    super();
    r(this, "container");
  }
  connectedCallback() {
    this.attachShadow({ mode: "open" }), this.targetElId = this.dataset.targetId, this.trackColor = this.dataset.trackColor || "#f2f2f2", this.trackWidth = this.dataset.trackWidth || "6px", this.thumbColor = this.dataset.thumbColor || "#c1c1c1", this.targetEl = document.querySelector("#onbotgo-messageContainer");
    const t = document.createElement("style");
    if (t.textContent = `
        .custom-scrollbar {
          width: ${this.trackWidth};
          height: 100%;
          position: absolute;
          top: 0;
          right: 0;
        }
  
        .custom-scrollbar__track {
          width: 100%;
          height: 100%;
          background-color: ${this.trackColor};
        }
  
        .custom-scrollbar__thumb {
          width: 100%;
          background-color: ${this.thumbColor};
          border-radius: ${this.trackWidth};
          position: absolute;
          top: 0;
          animation: top 0.25s ease-in;
  
        }
  
        .custom-scrollbar__thumb:hover {
          background-color: red;
        }
      `, this.shadowRoot.appendChild(t), !this.targetEl) {
      console.warn(
        `CustomScrollBar: target element with id "${this.targetElId}" not found`,
        this,
        this.dataset.targetId
      );
      return;
    }
    new IntersectionObserver((i) => {
      i.forEach((n) => {
        n.isIntersecting && (this.setTargetElCSS(), this.setScrollThumbHeight());
      });
    }).observe(this.targetEl), this.shadowRoot.innerHTML += `
        <div class="custom-scrollbar">
          <div class="custom-scrollbar__track">
            <div class="custom-scrollbar__thumb"></div>
          </div>
        </div>
      `, this.targetEl.addEventListener("scroll", () => {
      this.moveScrollThumb();
    });
  }
  moveScrollThumb() {
    const t = this.shadowRoot.querySelector(
      ".custom-scrollbar__thumb"
    ), e = this.shadowRoot.querySelector(
      ".custom-scrollbar__track"
    ).offsetHeight, i = this.targetEl.scrollTop / this.targetEl.scrollHeight * e;
    t.style.top = `${i}px`;
  }
  setTargetElCSS() {
    this.targetEl.style.overflowY = "scroll", this.targetEl.style.position = "relative", this.targetEl.style["-ms-overflow-style"] = "none", this.targetEl.style.scrollbarWidth = "none";
  }
  setScrollThumbHeight() {
    const t = this.shadowRoot.querySelector(
      ".custom-scrollbar__track"
    ), e = this.shadowRoot.querySelector(
      ".custom-scrollbar__thumb"
    ), i = t.offsetHeight, n = this.targetEl.offsetHeight, a = this.targetEl.scrollHeight, C = n / a * i;
    e.style.height = `${C}px`;
    let h = !1, m;
    e.addEventListener("mousedown", (g) => {
      h = !0, m = g.clientY, this.preventContentHighlight("remove");
    }), document.addEventListener("mouseup", () => {
      h = !1, this.preventContentHighlight("add");
    }), document.addEventListener("mousemove", (g) => {
      if (!h)
        return;
      const M = g.clientY - m;
      m = g.clientY, this.targetEl.scrollTop += M * (a / i);
    });
  }
  // prevent content highlight when dragging the thumb
  preventContentHighlight(t) {
    t ? this.targetEl.classList.add("prevent-scroll") : this.targetEl.classList.add("prevent-scroll");
  }
}
S.tag = "onbotgo-customscrollbar";
const j = `<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
width="18px" viewBox="0 0 750 750" enable-background="new 0 0 750 750" xml:space="preserve">
<path fill="#FFFFFF" opacity="1.000000" stroke="none" 
d="
M1.000000,275.000000 
C1.000000,183.333328 1.000000,92.166664 1.000000,1.000000 
C251.000000,1.000000 501.000000,1.000000 751.000000,1.000000 
C751.000000,251.000000 751.000000,501.000000 751.000000,751.000000 
C501.000000,751.000000 251.000000,751.000000 1.000000,751.000000 
C1.000000,592.500000 1.000000,434.000000 1.000000,275.000000 
M88.022148,235.872009 
C88.066109,239.261810 88.110069,242.651611 88.010864,246.963760 
C88.007248,274.215515 87.981773,301.467316 88.006454,328.719025 
C88.028870,353.474365 88.105843,378.229645 88.028114,403.912079 
C88.070885,432.614319 88.113655,461.316589 88.011223,490.948303 
C88.011223,564.164307 88.011223,637.380310 88.011223,711.000000 
C89.651970,711.000000 90.946762,711.000000 92.241562,711.000000 
C173.328812,711.000000 254.416046,711.000671 335.503296,710.993347 
C336.664856,710.993225 337.826447,710.893311 339.740173,710.968079 
C340.498138,710.925598 341.256073,710.883179 342.939209,710.988770 
C448.829376,710.988770 554.719543,710.988770 661.000000,710.988770 
C661.000000,709.161926 661.000000,707.700012 661.000000,706.238037 
C661.000000,561.823059 661.000488,417.408081 660.993164,272.993103 
C660.993103,271.664703 660.890808,270.336334 660.976501,268.101013 
C660.929810,264.731171 660.883118,261.361298 660.988464,257.066162 
C660.988464,186.513000 660.988464,115.959831 660.988464,45.000008 
C659.334412,45.000008 658.048523,45.000008 656.762573,45.000008 
C567.016052,45.000011 477.269562,44.999424 387.523041,45.006451 
C386.361267,45.006542 385.199463,45.103436 383.107513,45.021538 
C376.391418,45.065651 369.675323,45.109764 362.033478,45.011021 
C270.770203,45.011021 179.506958,45.011021 88.000000,45.011021 
C88.000000,47.350853 88.000000,49.160931 88.000000,50.971008 
C88.000000,91.469856 87.983521,131.968719 88.006821,172.467545 
C88.018806,193.296692 88.101700,214.125809 88.022148,235.872009 
z"/>
<path fill="transparent" opacity="1.000000" stroke="none" 
d="
M660.836304,269.007935 
C660.890808,270.336334 660.993103,271.664703 660.993164,272.993103 
C661.000488,417.408081 661.000000,561.823059 661.000000,706.238037 
C661.000000,707.700012 661.000000,709.161926 661.000000,710.988770 
C554.719543,710.988770 448.829376,710.988770 342.612183,710.600342 
C354.813660,702.671997 367.340149,695.128784 379.871277,687.593262 
C390.738831,681.058228 402.032745,675.130554 412.377930,667.853577 
C425.991974,658.277344 439.099365,647.933533 451.991119,637.389771 
C467.877472,624.396851 483.724030,611.299011 498.799652,597.392151 
C507.963715,588.938477 515.775452,578.988770 523.954712,569.504150 
C538.439514,552.707520 549.785095,533.937195 558.161499,513.409363 
C560.808716,506.921967 563.006042,500.251038 565.713440,492.830322 
C556.753967,498.322632 548.986145,503.390747 540.936951,507.963837 
C511.514709,524.679871 481.934021,541.117432 452.543457,557.888550 
C436.166565,567.233704 420.254089,577.406982 403.731659,586.477234 
C394.373016,591.614685 384.348755,596.810242 373.319977,595.728638 
C365.408691,594.952881 356.994965,593.025513 350.102051,589.246704 
C323.014618,574.396667 296.494812,558.514954 269.658997,543.200806 
C248.319962,531.023499 226.986938,518.818237 205.347137,507.191376 
C191.095123,499.533875 178.414276,489.886475 166.639206,479.022278 
C149.525314,463.232361 134.769669,445.530640 123.372070,425.029327 
C113.442574,407.168762 105.556778,388.526306 100.080093,368.907410 
C96.082901,354.588440 92.839447,340.059082 89.000000,324.574951 
C89.000000,327.191010 89.000000,328.779877 89.000000,330.368774 
C89.000000,352.867493 89.018204,375.366241 88.963676,397.864838 
C88.959534,399.572174 88.439163,401.278290 88.158752,402.984955 
C88.105843,378.229645 88.028870,353.474365 88.006454,328.719025 
C87.981773,301.467316 88.007248,274.215515 88.402878,246.753250 
C89.190285,249.641891 89.560684,252.744476 89.985207,255.839630 
C92.304466,272.749176 94.629791,289.657898 96.966827,306.565002 
C100.002563,328.526855 105.070808,350.047485 111.661903,371.181824 
C119.692017,396.930420 131.382629,420.953156 147.431259,442.692841 
C152.159348,449.097565 157.750427,454.865234 162.945999,460.924896 
C163.378723,460.675903 163.811462,460.426880 164.244186,460.177887 
C163.830154,457.137238 163.031525,454.092285 163.065216,451.056580 
C163.266144,432.947205 163.947632,414.839478 163.917236,396.732117 
C163.875946,372.123840 163.126129,347.516754 163.085403,322.908478 
C163.054611,304.302246 163.645523,285.694733 163.983414,267.088226 
C164.307480,249.242798 173.291382,236.313034 188.046371,227.585220 
C212.086807,213.364914 236.586807,199.923599 260.815887,186.019424 
C275.913269,177.355576 290.971710,168.614731 305.864838,159.606247 
C329.485443,145.318710 352.925720,130.947113 380.074188,123.713074 
C395.855530,119.507935 411.742645,116.007782 427.918396,115.276680 
C442.240356,114.629356 456.707184,115.866493 471.039856,117.092422 
C491.545654,118.846367 511.293640,124.429520 530.901733,130.443481 
C536.441589,132.142609 541.998474,133.786224 547.547546,135.455292 
C533.264282,126.341766 518.703918,118.120102 504.289001,109.650887 
C485.174622,98.420616 466.232117,86.897644 447.108307,75.683662 
C426.904327,63.836277 407.162476,50.987228 384.037689,45.155148 
C385.199463,45.103436 386.361267,45.006542 387.523041,45.006451 
C477.269562,44.999424 567.016052,45.000011 656.762573,45.000008 
C658.048523,45.000008 659.334412,45.000008 660.988464,45.000008 
C660.988464,115.959831 660.988464,186.513000 660.571899,257.272827 
C659.436462,247.123749 659.333679,236.679214 657.857422,226.432556 
C655.518433,210.197495 647.470215,196.708603 634.747131,186.461273 
C621.546448,175.829224 606.450439,168.101990 590.601685,162.458054 
C562.868164,152.581802 534.968567,143.071335 506.774200,134.623734 
C486.656555,128.596085 465.835846,125.333893 444.634064,126.005096 
C435.036224,126.308945 425.402802,126.258766 415.855072,127.130760 
C408.192749,127.830551 400.635345,129.678665 393.031372,131.017212 
C393.009155,131.450546 392.986938,131.883881 392.964722,132.317230 
C395.387238,133.431351 397.912415,134.366653 400.215668,135.688614 
C415.218597,144.299500 430.162628,153.012970 445.146393,161.657379 
C469.041748,175.443008 492.978973,189.156326 516.848450,202.986588 
C532.235535,211.902039 547.656616,220.770020 562.826843,230.044632 
C572.702698,236.082397 579.474243,244.993774 581.815308,256.380554 
C583.589539,265.010529 584.539185,273.903809 584.850159,282.715363 
C585.182129,292.123596 584.142395,301.571320 584.033936,311.005615 
C583.617065,347.260956 583.476990,383.520020 582.925842,419.773010 
C582.720032,433.310852 582.098938,446.874725 580.874756,460.354767 
C579.842102,471.726074 578.132507,483.087952 575.875610,494.283264 
C572.868408,509.200439 567.639160,523.533936 560.394043,536.875549 
C552.190308,551.982361 542.795227,566.437073 530.660217,578.808472 
C518.547241,591.157471 506.144348,603.222229 494.044006,615.583374 
C490.815613,618.881287 488.229584,622.807983 485.348663,626.446045 
C491.547546,621.735901 498.563354,617.728394 505.598969,613.756104 
C529.489624,600.267334 553.431519,586.868713 577.266846,573.283081 
C593.570557,563.990295 609.949951,554.798584 625.882996,544.897827 
C638.626770,536.978821 649.122620,526.673767 654.473633,512.071960 
C658.715393,500.497162 659.443359,488.313690 659.812927,476.268036 
C660.265198,461.528809 659.140503,446.748413 659.044739,431.983582 
C658.884705,407.300842 658.873840,382.615417 659.040283,357.932770 
C659.166809,339.169373 659.719177,320.409210 659.977661,301.646179 
C660.106140,292.317657 659.961853,282.985565 660.037415,273.655884 
C660.050049,272.104523 660.557556,270.557159 660.836304,269.007935 
M339.001434,209.498001 
C332.685333,213.152039 326.330139,216.740326 320.060333,220.472153 
C299.299225,232.829269 278.578827,245.254822 257.823700,257.622040 
C240.037231,268.220337 230.149826,283.648712 230.059875,304.524628 
C229.865326,349.677246 230.046677,394.831390 229.906082,439.984375 
C229.895508,443.378235 230.973923,445.314972 233.739502,446.991974 
C251.767258,457.923615 269.707184,469.000000 287.726074,479.946381 
C320.565491,499.896088 353.432709,519.800232 386.308350,539.690186 
C390.617188,542.297058 395.044006,544.708923 400.000000,547.545227 
C400.000000,534.663208 399.855957,522.836243 400.138153,511.019440 
C400.186646,508.988983 401.519684,506.082153 403.157440,505.138031 
C418.337189,496.387085 433.702057,487.956421 449.036469,479.474884 
C468.059143,468.953369 487.075012,458.418854 506.161682,448.014435 
C510.338379,445.737701 512.194275,443.093658 512.164490,437.858551 
C511.886688,389.041107 512.138977,340.220764 511.902710,291.402863 
C511.843323,279.133850 506.774170,268.528107 498.766693,259.164154 
C490.816589,249.867325 479.774414,245.478973 469.485229,239.949310 
C444.881744,226.726791 420.104919,213.826996 395.409485,200.775330 
C389.522583,197.664078 383.451447,194.816299 377.910095,191.170822 
C374.946442,189.221176 372.921173,189.248917 370.123901,190.941299 
C360.003204,197.064438 349.788422,203.032059 339.001434,209.498001 
z"/>
<path fill="#3B88F4" opacity="1.000000" stroke="none" 
d="
M88.093430,403.448517 
C88.439163,401.278290 88.959534,399.572174 88.963676,397.864838 
C89.018204,375.366241 89.000000,352.867493 89.000000,330.368774 
C89.000000,328.779877 89.000000,327.191010 89.000000,324.574951 
C92.839447,340.059082 96.082901,354.588440 100.080093,368.907410 
C105.556778,388.526306 113.442574,407.168762 123.372070,425.029327 
C134.769669,445.530640 149.525314,463.232361 166.639206,479.022278 
C178.414276,489.886475 191.095123,499.533875 205.347137,507.191376 
C226.986938,518.818237 248.319962,531.023499 269.658997,543.200806 
C296.494812,558.514954 323.014618,574.396667 350.102051,589.246704 
C356.994965,593.025513 365.408691,594.952881 373.319977,595.728638 
C384.348755,596.810242 394.373016,591.614685 403.731659,586.477234 
C420.254089,577.406982 436.166565,567.233704 452.543457,557.888550 
C481.934021,541.117432 511.514709,524.679871 540.936951,507.963837 
C548.986145,503.390747 556.753967,498.322632 565.713440,492.830322 
C563.006042,500.251038 560.808716,506.921967 558.161499,513.409363 
C549.785095,533.937195 538.439514,552.707520 523.954712,569.504150 
C515.775452,578.988770 507.963715,588.938477 498.799652,597.392151 
C483.724030,611.299011 467.877472,624.396851 451.991119,637.389771 
C439.099365,647.933533 425.991974,658.277344 412.377930,667.853577 
C402.032745,675.130554 390.738831,681.058228 379.871277,687.593262 
C367.340149,695.128784 354.813660,702.671997 342.149597,710.526245 
C341.256073,710.883179 340.498138,710.925598 339.368835,710.446899 
C338.998291,698.265625 338.881378,686.603638 339.071228,674.946533 
C339.128754,671.413513 338.390930,669.317444 334.764679,667.820618 
C329.523590,665.657288 324.549042,662.771912 319.643890,659.883667 
C294.297424,644.958618 269.131317,629.723389 243.666870,615.003662 
C217.624802,599.949890 191.421112,585.166382 165.076874,570.647888 
C146.690262,560.514832 128.040314,550.794678 111.546669,537.709595 
C102.050766,530.176147 94.851891,520.595764 92.008911,508.416321 
C90.585037,502.316437 89.431969,496.153351 88.156425,490.018829 
C88.113655,461.316589 88.070885,432.614319 88.093430,403.448517 
z"/>
<path fill="#32A850" opacity="1.000000" stroke="none" 
d="
M383.572601,45.088341 
C407.162476,50.987228 426.904327,63.836277 447.108307,75.683662 
C466.232117,86.897644 485.174622,98.420616 504.289001,109.650887 
C518.703918,118.120102 533.264282,126.341766 547.547546,135.455292 
C541.998474,133.786224 536.441589,132.142609 530.901733,130.443481 
C511.293640,124.429520 491.545654,118.846367 471.039856,117.092422 
C456.707184,115.866493 442.240356,114.629356 427.918396,115.276680 
C411.742645,116.007782 395.855530,119.507935 380.074188,123.713074 
C352.925720,130.947113 329.485443,145.318710 305.864838,159.606247 
C290.971710,168.614731 275.913269,177.355576 260.815887,186.019424 
C236.586807,199.923599 212.086807,213.364914 188.046371,227.585220 
C173.291382,236.313034 164.307480,249.242798 163.983414,267.088226 
C163.645523,285.694733 163.054611,304.302246 163.085403,322.908478 
C163.126129,347.516754 163.875946,372.123840 163.917236,396.732117 
C163.947632,414.839478 163.266144,432.947205 163.065216,451.056580 
C163.031525,454.092285 163.830154,457.137238 164.244186,460.177887 
C163.811462,460.426880 163.378723,460.675903 162.945999,460.924896 
C157.750427,454.865234 152.159348,449.097565 147.431259,442.692841 
C131.382629,420.953156 119.692017,396.930420 111.661903,371.181824 
C105.070808,350.047485 100.002563,328.526855 96.966827,306.565002 
C94.629791,289.657898 92.304466,272.749176 89.985207,255.839630 
C89.560684,252.744476 89.190285,249.641891 88.474457,246.292084 
C88.110069,242.651611 88.066109,239.261810 88.408829,235.161133 
C89.653336,211.424240 99.461922,193.358643 119.043915,181.049942 
C132.237259,172.756958 145.615982,164.737106 159.150604,157.013580 
C183.551834,143.089035 208.243027,129.671341 232.604355,115.678505 
C254.099243,103.332130 275.279449,90.439117 296.653839,77.881470 
C317.957275,65.365509 338.669800,51.629372 362.959229,45.153877 
C369.675323,45.109764 376.391418,45.065651 383.572601,45.088341 
z"/>
<path fill="#EA4033" opacity="1.000000" stroke="none" 
d="
M660.906372,268.554474 
C660.557556,270.557159 660.050049,272.104523 660.037415,273.655884 
C659.961853,282.985565 660.106140,292.317657 659.977661,301.646179 
C659.719177,320.409210 659.166809,339.169373 659.040283,357.932770 
C658.873840,382.615417 658.884705,407.300842 659.044739,431.983582 
C659.140503,446.748413 660.265198,461.528809 659.812927,476.268036 
C659.443359,488.313690 658.715393,500.497162 654.473633,512.071960 
C649.122620,526.673767 638.626770,536.978821 625.882996,544.897827 
C609.949951,554.798584 593.570557,563.990295 577.266846,573.283081 
C553.431519,586.868713 529.489624,600.267334 505.598969,613.756104 
C498.563354,617.728394 491.547546,621.735901 485.348663,626.446045 
C488.229584,622.807983 490.815613,618.881287 494.044006,615.583374 
C506.144348,603.222229 518.547241,591.157471 530.660217,578.808472 
C542.795227,566.437073 552.190308,551.982361 560.394043,536.875549 
C567.639160,523.533936 572.868408,509.200439 575.875610,494.283264 
C578.132507,483.087952 579.842102,471.726074 580.874756,460.354767 
C582.098938,446.874725 582.720032,433.310852 582.925842,419.773010 
C583.476990,383.520020 583.617065,347.260956 584.033936,311.005615 
C584.142395,301.571320 585.182129,292.123596 584.850159,282.715363 
C584.539185,273.903809 583.589539,265.010529 581.815308,256.380554 
C579.474243,244.993774 572.702698,236.082397 562.826843,230.044632 
C547.656616,220.770020 532.235535,211.902039 516.848450,202.986588 
C492.978973,189.156326 469.041748,175.443008 445.146393,161.657379 
C430.162628,153.012970 415.218597,144.299500 400.215668,135.688614 
C397.912415,134.366653 395.387238,133.431351 392.964722,132.317230 
C392.986938,131.883881 393.009155,131.450546 393.031372,131.017212 
C400.635345,129.678665 408.192749,127.830551 415.855072,127.130760 
C425.402802,126.258766 435.036224,126.308945 444.634064,126.005096 
C465.835846,125.333893 486.656555,128.596085 506.774200,134.623734 
C534.968567,143.071335 562.868164,152.581802 590.601685,162.458054 
C606.450439,168.101990 621.546448,175.829224 634.747131,186.461273 
C647.470215,196.708603 655.518433,210.197495 657.857422,226.432556 
C659.333679,236.679214 659.436462,247.123749 660.495850,257.735474 
C660.883118,261.361298 660.929810,264.731171 660.906372,268.554474 
z"/>
<path fill="transparent" opacity="1.000000" stroke="none" 
d="
M88.083824,490.483582 
C89.431969,496.153351 90.585037,502.316437 92.008911,508.416321 
C94.851891,520.595764 102.050766,530.176147 111.546669,537.709595 
C128.040314,550.794678 146.690262,560.514832 165.076874,570.647888 
C191.421112,585.166382 217.624802,599.949890 243.666870,615.003662 
C269.131317,629.723389 294.297424,644.958618 319.643890,659.883667 
C324.549042,662.771912 329.523590,665.657288 334.764679,667.820618 
C338.390930,669.317444 339.128754,671.413513 339.071228,674.946533 
C338.881378,686.603638 338.998291,698.265625 338.992737,710.382935 
C337.826447,710.893311 336.664856,710.993225 335.503296,710.993347 
C254.416046,711.000671 173.328812,711.000000 92.241562,711.000000 
C90.946762,711.000000 89.651970,711.000000 88.011223,711.000000 
C88.011223,637.380310 88.011223,564.164307 88.083824,490.483582 
z"/>
<path fill="transparent" opacity="1.000000" stroke="none" 
d="
M362.496338,45.082451 
C338.669800,51.629372 317.957275,65.365509 296.653839,77.881470 
C275.279449,90.439117 254.099243,103.332130 232.604355,115.678505 
C208.243027,129.671341 183.551834,143.089035 159.150604,157.013580 
C145.615982,164.737106 132.237259,172.756958 119.043915,181.049942 
C99.461922,193.358643 89.653336,211.424240 88.474030,234.702606 
C88.101700,214.125809 88.018806,193.296692 88.006821,172.467545 
C87.983521,131.968719 88.000000,91.469856 88.000000,50.971008 
C88.000000,49.160931 88.000000,47.350853 88.000000,45.011021 
C179.506958,45.011021 270.770203,45.011021 362.496338,45.082451 
z"/>
<path fill="#F8BF00" opacity="1.000000" stroke="none" 
d="
M339.305298,209.278198 
C349.788422,203.032059 360.003204,197.064438 370.123901,190.941299 
C372.921173,189.248917 374.946442,189.221176 377.910095,191.170822 
C383.451447,194.816299 389.522583,197.664078 395.409485,200.775330 
C420.104919,213.826996 444.881744,226.726791 469.485229,239.949310 
C479.774414,245.478973 490.816589,249.867325 498.766693,259.164154 
C506.774170,268.528107 511.843323,279.133850 511.902710,291.402863 
C512.138977,340.220764 511.886688,389.041107 512.164490,437.858551 
C512.194275,443.093658 510.338379,445.737701 506.161682,448.014435 
C487.075012,458.418854 468.059143,468.953369 449.036469,479.474884 
C433.702057,487.956421 418.337189,496.387085 403.157440,505.138031 
C401.519684,506.082153 400.186646,508.988983 400.138153,511.019440 
C399.855957,522.836243 400.000000,534.663208 400.000000,547.545227 
C395.044006,544.708923 390.617188,542.297058 386.308350,539.690186 
C353.432709,519.800232 320.565491,499.896088 287.726074,479.946381 
C269.707184,469.000000 251.767258,457.923615 233.739502,446.991974 
C230.973923,445.314972 229.895508,443.378235 229.906082,439.984375 
C230.046677,394.831390 229.865326,349.677246 230.059875,304.524628 
C230.149826,283.648712 240.037231,268.220337 257.823700,257.622040 
C278.578827,245.254822 299.299225,232.829269 320.060333,220.472153 
C326.330139,216.740326 332.685333,213.152039 339.305298,209.278198 
M434.683777,322.998627 
C433.432404,323.315918 432.196838,323.732269 430.927155,323.934601 
C421.965851,325.362366 418.105682,335.934540 419.074524,341.828735 
C420.433807,350.098267 429.368927,358.023254 436.553192,356.885986 
C446.404022,355.326660 453.002350,349.320312 452.819550,339.182343 
C452.661957,330.440094 447.804291,323.684448 434.683777,322.998627 
M327.955780,343.822937 
C327.779602,340.539917 328.292847,337.029419 327.298553,334.016357 
C324.265228,324.824219 313.268433,320.300476 304.278931,324.335938 
C296.468933,327.841919 291.660919,337.514313 296.220612,347.394775 
C299.365784,354.209961 307.299225,357.696686 314.529236,356.081970 
C321.055634,354.624481 325.089722,350.462372 327.955780,343.822937 
z"/>
<path fill="#FFFFFF" opacity="1.000000" stroke="none" 
d="
M435.116150,322.998901 
C447.804291,323.684448 452.661957,330.440094 452.819550,339.182343 
C453.002350,349.320312 446.404022,355.326660 436.553192,356.885986 
C429.368927,358.023254 420.433807,350.098267 419.074524,341.828735 
C418.105682,335.934540 421.965851,325.362366 430.927155,323.934601 
C432.196838,323.732269 433.432404,323.315918 435.116150,322.998901 
z"/>
<path fill="#FFFFFE" opacity="1.000000" stroke="none" 
d="
M327.856506,344.228943 
C325.089722,350.462372 321.055634,354.624481 314.529236,356.081970 
C307.299225,357.696686 299.365784,354.209961 296.220612,347.394775 
C291.660919,337.514313 296.468933,327.841919 304.278931,324.335938 
C313.268433,320.300476 324.265228,324.824219 327.298553,334.016357 
C328.292847,337.029419 327.779602,340.539917 327.856506,344.228943 
z"/>
</svg>`, k = "onbotgo-chatcontainer";
class E extends d {
  constructor() {
    super();
    r(this, "messagesHistory", [
      {
        message: "¡Hola! ¿En qué puedo ayudarte hoy?",
        type: "apiMessage"
      }
    ]);
    r(this, "scrollableContainer", new l());
    r(this, "messagesContainer", new l());
    r(this, "scrollBar", new S());
    r(this, "chatInput", new w());
    r(this, "footer", new l());
    r(this, "defaultStyles", {
      bottom: "60px",
      right: "10px",
      position: "absolute",
      display: "flex",
      boxShadow: "rgba(0, 0, 0, 0.16) 0px 5px 40px",
      flexDirection: "column",
      width: "400px",
      gap: "10px",
      maxWidth: "calc(100vw - 90px)",
      maxHeight: "704px",
      height: "70vh",
      backgroundColor: "white",
      borderRadius: "8px",
      padding: "10px 20px"
    });
    this.classList.add("hidden"), this.setStyles(this.defaultStyles), this.messagesContainer.id = "onbotgo-messageContainer", this.scrollBar["data-target-id"] = "scrollableElement", this.scrollBar.style.visibility = "hidden", this.scrollableContainer.appendChild(this.scrollBar), this.scrollableContainer.appendChild(this.messagesContainer), this.scrollableContainer.setStyles({
      height: "85%",
      position: "relative",
      overflow: "hidden",
      marginBottom: "15px"
    }), this.messagesContainer.setStyles({
      height: "calc(100% - 1.5rem)",
      position: "relative",
      display: "flex",
      flexDirection: "column",
      gap: "15px",
      position: "relative",
      padding: "1rem"
    }), this.chatInput.onSubmit(this.onSubmit.bind(this)), this.footer.setStyles({
      width: "100%",
      color: "#a1a1a1",
      display: "flex",
      alignItems: "center",
      fontFamily: c.typography.primary,
      fontSize: "10px",
      justifyContent: "flex-end",
      gap: "5px"
    }), this.footer.innerHTML = `Powered by ONBOTGO LLC. ${j}`, this.appendChild(this.scrollableContainer), this.appendChild(this.chatInput), this.appendChild(this.footer), this.renderMessages(this.messagesHistory);
  }
  onSubmit(t) {
    if (t = t.trim(), !t)
      return;
    const e = structuredClone(this.messagesHistory);
    e.splice(0, 1);
    const i = {
      history: e,
      question: t
    };
    this.addMessages([{ message: t, type: "userMessage" }]), this.renderMessages([{ type: "loadingMessage" }]), this.updateScrollbar(), z(i).then((n) => {
      if (!n.success)
        throw new Error(n.msg);
      n.data.process.length && n.data.process.forEach((a) => {
        this.addMessages([
          {
            type: a.role,
            name: a.name,
            content: a.content
          }
        ]);
      }), this.addMessages([
        { message: n.data.answer, type: "apiMessage" }
      ]);
    }).catch((n) => console.log(n)).finally(() => {
      var n;
      (n = this.messagesContainer.querySelectorAll(".loading-api-message")) == null || n.forEach((a) => a.remove()), this.updateScrollbar();
    });
  }
  toggle() {
    this.classList.contains("hidden") ? (this.scrollBar.style.visibility = "hidden", this.classList.remove("hidden")) : (this.classList.add("hidden"), this.messagesContainer.scrollTop > 0 && (this.scrollBar.style.visibility = "visible"));
  }
  renderMessages(t) {
    t.forEach(
      (e) => !["dataMessage"].includes(e.type) && this.messagesContainer.appendChild(new v(e))
    );
  }
  addMessages(t, { updateScrollbar: e } = { updateScrollbar: !1 }) {
    this.messagesHistory = this.messagesHistory.concat(t), this.renderMessages(t), e && this.updateScrollbar();
  }
  updateScrollbar() {
    this.scrollBar.setScrollThumbHeight(), this.messagesContainer.scrollTo(0, this.messagesContainer.scrollHeight), this.messagesContainer.scrollTop > 0 && this.scrollBar.style.visibility === "hidden" && (this.scrollBar.style.visibility = "visible");
  }
}
const O = () => ({
  [`${k}.hidden`]: {
    visibility: "hidden"
  }
});
E.tag = k;
class f extends d {
  constructor() {
    super();
    r(this, "componentStyles", {
      display: "inline-block",
      position: "absolute",
      bottom: "20px",
      right: "20px"
    });
    const t = new x(c.customIcon), e = new E();
    t.onclick = () => e.toggle(), this.appendChild(t), this.appendChild(e), this.setStyles(this.componentStyles);
  }
  connectedCallback() {
  }
}
f.tag = "onbotgo-chatbot";
function A({ element: o, styles: s }) {
  const t = s.reduce(
    (n, a) => ({
      ...n,
      ...a
    }),
    {}
  ), e = document.createElement("style"), i = W(t);
  e.innerHTML = i, o.prepend(e);
}
function R(o, s = {}) {
  const t = Object.keys(s), e = Object.values(s);
  let i = `${o}{`;
  return t.forEach((n, a) => i += `${n}:${e[a]};`), i + "}";
}
function q(o, s = {}) {
  const t = Object.keys(s), e = Object.values(s);
  let i = `${o}{`;
  return t.forEach((n, a) => i += `${n}${e[a]};`), i + "}";
}
function W(o, s = !1) {
  const t = Object.keys(o);
  let e = "";
  return t.forEach(
    (i) => e += s === "animation" ? q(
      i,
      o[i]
    ) : R(
      i,
      o[i]
    )
  ), e;
}
class N {
  constructor({ chatflow: s, theme: t }) {
    if (b.chatflowID = s, !t)
      return;
    const { typography: e, colors: i, icon: n } = t;
    e && Object.keys(e).forEach(
      (a) => c.typography[a] = e[a]
    ), i && Object.keys(i).forEach(
      (a) => c.colors[a] = i[a]
    ), n && (c.customIcon = n);
  }
  init() {
    this.registerComponents(
      f,
      x,
      E,
      v,
      w,
      l,
      S
    );
    const s = new f();
    A({
      element: s,
      styles: [
        L(c),
        _(c),
        $(c),
        O()
      ]
    }), document.body.appendChild(s);
  }
  registerComponents(...s) {
    s.forEach((t) => customElements.define(t.tag, t));
  }
}
export {
  N as default
};
