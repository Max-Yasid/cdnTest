var T = Object.defineProperty;
var H = (s, o, t) => o in s ? T(s, o, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[o] = t;
var a = (s, o, t) => (H(s, typeof o != "symbol" ? o + "" : o, t), t);
class h extends HTMLElement {
  setStyles(o) {
    Object.keys(o).forEach((e) => {
      this.style[e] = o[e];
    });
  }
}
const g = "onbotgo-bubble";
class v extends h {
  constructor() {
    super(), this.innerHTML = `
      <svg viewBox="0 0 24 24"><path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path></svg>
    `;
  }
}
v.tag = g;
const B = (s) => ({
  [g]: {
    display: "grid",
    "place-items": "center",
    width: "48px",
    height: "48px",
    "background-color": s.colors.primary,
    fill: "transparent",
    "border-radius": "100px",
    transition: "transform 0.1s linear"
  },
  [`${g}:hover`]: {
    transform: "scale(1.1)"
  },
  [`${g} > svg`]: {
    width: "28px",
    height: "28px",
    stroke: "white",
    "stroke-width": "2px",
    "border-image-width": "2"
  }
}), I = "onbotgo-box";
class l extends h {
  constructor() {
    super(), this.setStyles({ display: "inline-block", width: "100%" });
  }
}
l.tag = I;
const b = "onbotgo-chatinput";
class w extends h {
  constructor() {
    super();
    a(this, "defaultStyles", {
      height: "8%",
      width: "100%",
      display: "grid",
      gridTemplateColumns: "10fr 1fr",
      alignItems: "center",
      boxShadow: "0 2px 6px -1px rgba(0,0,0,.1)"
    });
    a(this, "input", document.createElement("input"));
    a(this, "sendIcon", new l());
    this.setStyles(this.defaultStyles), this.input, this.input.type = "text", this.input.placeholder = "Escribe un mensaje", this.sendIcon.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="19px" class="send-icon flex " ><path d="M476.59 227.05l-.16-.07L49.35 49.84A23.56 23.56 0 0027.14 52 24.65 24.65 0 0016 72.59v113.29a24 24 0 0019.52 23.57l232.93 43.07a4 4 0 010 7.86L35.53 303.45A24 24 0 0016 327v113.31A23.57 23.57 0 0026.59 460a23.94 23.94 0 0013.22 4 24.55 24.55 0 009.52-1.93L476.4 285.94l.19-.09a32 32 0 000-58.8z"></path></svg>', this.appendChild(this.input), this.appendChild(this.sendIcon);
  }
  onSubmit(t) {
    this.sendIcon.onclick = (e) => t(this.input.value), this.input.onkeydown = (e) => {
      ["13", "Enter"].includes(e.key) && (t(this.input.value), this.input.value = "");
    };
  }
}
w.tag = b;
const M = (s) => ({
  [`${b} > input`]: {
    "border-radius": "6px",
    outline: "none",
    border: "none",
    height: "100%",
    padding: "0 10px"
  },
  [`${b} svg`]: {
    cursor: "pointer",
    fill: s.colors.primary
  }
});
class _ {
  constructor() {
    a(this, "typography", {
      primary: "'Trebuchet MS', sans-serif"
    });
    a(this, "colors", { primary: "rgb(59, 129, 246)" });
  }
}
const c = new _(), y = "onbotgo-chatmessage";
class p extends h {
  constructor(t) {
    super();
    a(this, "messageBox", new l());
    this.setStyles({
      width: "100%",
      display: "flex",
      minHeight: "max(45px,fit-content)",
      justifyContent: t.type === "userMessage" ? "flex-end" : "flex-start"
    });
    const e = {
      userMessage: "from-user",
      apiMessage: "from-chatbot"
    };
    if (this.messageBox.setStyles({
      width: "fit-content",
      height: "fit-content",
      borderRadius: "6px",
      display: "flex",
      alignItems: "center",
      padding: "15px 15px",
      fontFamily: c.typography.primary,
      color: t.type === "userMessage" ? "white" : "black"
    }), this.messageBox.classList.add(e[t.type]), this.messageBox.innerText = t.message, t.type !== "userMessage") {
      const i = new l();
      i.classList.add("bg-semi-transp"), this.messageBox.appendChild(i);
    }
    this.appendChild(this.messageBox);
  }
}
p.tag = y;
const $ = (s) => ({
  [`${y} > .from-chatbot`]: {
    width: "100%",
    content: "",
    overflow: "hidden",
    position: "relative",
    "max-width": "75%",
    "z-index": 1
  },
  [`${y} > .from-chatbot > .bg-semi-transp`]: {
    position: "absolute",
    width: "100%",
    height: "100%",
    opacity: ".1",
    top: 0,
    "z-index": "-1",
    left: 0,
    "background-color": s.colors.primary
  },
  [`${p.tag} > .from-user`]: {
    "margin-right": "15px",
    "max-width": "70%",
    "background-color": s.colors.primary
  }
});
class L {
  constructor() {
    a(this, "gpt_url", "https://api-whatsapp-dev.mibot.cl:7070");
    a(this, "chatflowID", "");
  }
}
const f = new L(), j = async (s) => await fetch(
  `${f.gpt_url}/v1/internal-prediction/${f.chatflowID}`,
  {
    headers: {
      "Content-Type": "application/json"
    },
    method: "POST",
    body: JSON.stringify(s)
  }
).then((o) => o.json());
class C extends HTMLElement {
  constructor(t) {
    super();
    a(this, "container");
  }
  connectedCallback() {
    this.attachShadow({ mode: "open" }), this.targetElId = this.dataset.targetId, this.trackColor = this.dataset.trackColor || "#f2f2f2", this.trackWidth = this.dataset.trackWidth || "6px", this.thumbColor = this.dataset.thumbColor || "#c1c1c1", this.targetEl = document.querySelector("#onbotgo-messageContainer");
    const t = document.createElement("style");
    if (t.textContent = `
        .custom-scrollbar {
          width: ${this.trackWidth};
          height: 100%;
          position: absolute;
          top: 0;
          right: 0;
        }
  
        .custom-scrollbar__track {
          width: 100%;
          height: 100%;
          background-color: ${this.trackColor};
        }
  
        .custom-scrollbar__thumb {
          width: 100%;
          background-color: ${this.thumbColor};
          border-radius: ${this.trackWidth};
          position: absolute;
          top: 0;
          animation: top 0.25s ease-in;
  
        }
  
        .custom-scrollbar__thumb:hover {
          background-color: red;
        }
      `, this.shadowRoot.appendChild(t), !this.targetEl) {
      console.warn(
        `CustomScrollBar: target element with id "${this.targetElId}" not found`,
        this,
        this.dataset.targetId
      );
      return;
    }
    new IntersectionObserver((i) => {
      i.forEach((r) => {
        r.isIntersecting && (this.setTargetElCSS(), this.setScrollThumbHeight());
      });
    }).observe(this.targetEl), this.shadowRoot.innerHTML += `
        <div class="custom-scrollbar">
          <div class="custom-scrollbar__track">
            <div class="custom-scrollbar__thumb"></div>
          </div>
        </div>
      `, this.targetEl.addEventListener("scroll", () => {
      this.moveScrollThumb();
    });
  }
  moveScrollThumb() {
    const t = this.shadowRoot.querySelector(
      ".custom-scrollbar__thumb"
    ), e = this.shadowRoot.querySelector(
      ".custom-scrollbar__track"
    ).offsetHeight, i = this.targetEl.scrollTop / this.targetEl.scrollHeight * e;
    t.style.top = `${i}px`;
  }
  setTargetElCSS() {
    this.targetEl.style.overflowY = "scroll", this.targetEl.style.position = "relative", this.targetEl.style["-ms-overflow-style"] = "none", this.targetEl.style.scrollbarWidth = "none";
  }
  setScrollThumbHeight() {
    const t = this.shadowRoot.querySelector(
      ".custom-scrollbar__track"
    ), e = this.shadowRoot.querySelector(
      ".custom-scrollbar__thumb"
    ), i = t.offsetHeight, r = this.targetEl.offsetHeight, n = this.targetEl.scrollHeight, E = r / n * i;
    e.style.height = `${E}px`;
    let u = !1, m;
    e.addEventListener("mousedown", (d) => {
      u = !0, m = d.clientY, this.preventContentHighlight("remove");
    }), document.addEventListener("mouseup", () => {
      u = !1, this.preventContentHighlight("add");
    }), document.addEventListener("mousemove", (d) => {
      if (!u)
        return;
      const k = d.clientY - m;
      m = d.clientY, this.targetEl.scrollTop += k * (n / i);
    });
  }
  // prevent content highlight when dragging the thumb
  preventContentHighlight(t) {
    t ? this.targetEl.classList.add("prevent-scroll") : this.targetEl.classList.add("prevent-scroll");
  }
}
C.tag = "onbotgo-customscrollbar";
const O = "onbotgo-chatcontainer";
class S extends h {
  constructor() {
    super();
    a(this, "messagesHistory", [
      {
        message: "¡Hola! ¿En qué puedo ayudarte hoy?",
        type: "apiMessage"
      }
    ]);
    a(this, "scrollableContainer", new l());
    a(this, "messagesContainer", new l());
    a(this, "chatInput", new w());
    a(this, "scrollBar", new C());
    a(this, "defaultStyles", {
      visibility: "visible",
      bottom: "60px",
      right: "10px",
      position: "absolute",
      display: "inline-block",
      boxShadow: "rgba(0, 0, 0, 0.16) 0px 5px 40px",
      width: "400px",
      maxHeight: "704px",
      height: "70vh",
      backgroundColor: "white",
      borderRadius: "8px",
      padding: "10px 20px"
    });
    this.setStyles(this.defaultStyles), this.messagesContainer.id = "onbotgo-messageContainer", this.scrollBar["data-target-id"] = "scrollableElement", this.scrollBar.style.visibility = "hidden", this.scrollableContainer.appendChild(this.scrollBar), this.scrollableContainer.appendChild(this.messagesContainer), this.scrollableContainer.setStyles({
      height: "88%",
      position: "relative",
      overflow: "hidden",
      marginBottom: "15px"
    }), this.messagesContainer.setStyles({
      height: "calc(100% - 1.5rem)",
      position: "relative",
      display: "flex",
      flexDirection: "column",
      gap: "15px",
      position: "relative",
      padding: "1rem"
    }), this.chatInput.onSubmit(this.onSubmit.bind(this)), this.appendChild(this.scrollableContainer), this.appendChild(this.chatInput), this.renderMessages(this.messagesHistory);
  }
  onSubmit(t) {
    if (t = t.trim(), !!t)
      try {
        const e = structuredClone(this.messagesHistory);
        e.splice(0, 1);
        const i = {
          history: e,
          question: t
        };
        this.addMessages([{ message: t, type: "userMessage" }]), j(i).then((r) => {
          if (!r.success)
            throw new Error(r.msg);
          r.data.process.length && r.data.process.forEach((n) => {
            this.addMessages([
              {
                message: n.content,
                type: n.role,
                name: n.name
              }
            ]);
          }), this.addMessages([
            { message: r.data.answer, type: "apiMessage" }
          ]);
        });
      } catch {
      }
  }
  toggle() {
    this.style.visibility === "visible" ? (this.scrollBar.style.visibility = "hidden", this.style.visibility = "hidden") : (this.style.visibility = "visible", this.messagesContainer.scrollTop > 0 && (this.scrollBar.style.visibility = "visible"));
  }
  renderMessages(t) {
    t.forEach(
      (e) => !["dataMessage"].includes(e.type) && this.messagesContainer.appendChild(new p(e))
    );
  }
  addMessages(t) {
    this.messagesHistory = this.messagesHistory.concat(t), this.renderMessages(t), this.updateScrollbar();
  }
  updateScrollbar() {
    this.scrollBar.setScrollThumbHeight(), this.messagesContainer.scrollTo(0, this.messagesContainer.scrollHeight), console.log(this.messagesContainer.scrollTop, this.scrollBar.style.display), this.messagesContainer.scrollTop > 0 && this.scrollBar.style.visibility === "hidden" && (this.scrollBar.style.visibility = "visible");
  }
}
S.tag = O;
class x extends h {
  constructor() {
    super();
    a(this, "componentStyles", {
      display: "inline-block",
      position: "absolute",
      bottom: "20px",
      right: "20px"
    });
    const t = new v(), e = new S();
    t.onclick = () => e.toggle(), this.appendChild(t), this.appendChild(e), this.setStyles(this.componentStyles);
  }
  connectedCallback() {
  }
}
x.tag = "onbotgo-chatbot";
function R(s, o = {}) {
  const t = Object.keys(o), e = Object.values(o);
  let i = `${s}{`;
  return t.forEach((r, n) => i += `${r}:${e[n]};`), i + "}";
}
function q(s) {
  const o = Object.keys(s);
  let t = "";
  o.forEach(
    (i) => t += R(
      i,
      s[i]
    )
  );
  const e = document.createElement("style");
  return e.innerHTML = t, e;
}
function W({ element: s, styles: o }) {
  const t = o.reduce(
    (e, i) => ({
      ...e,
      ...i
    }),
    {}
  );
  s.prepend(q(t));
}
class D {
  constructor({ chatflow: o, theme: t }) {
    if (f.chatflowID = o, !t)
      return;
    const { typography: e, colors: i } = t;
    e && Object.keys(e).forEach(
      (r) => c.typography[r] = e[r]
    ), i && Object.keys(i).forEach(
      (r) => c.colors[r] = i[r]
    );
  }
  init() {
    this.registerComponents(
      x,
      v,
      S,
      p,
      w,
      l,
      C
    );
    const o = new x();
    W({
      element: o,
      styles: [
        B(c),
        $(c),
        M(c)
      ]
    }), document.body.appendChild(o);
  }
  registerComponents(...o) {
    o.forEach((t) => customElements.define(t.tag, t));
  }
}
export {
  D as default
};
