var x = Object.defineProperty;
var f = (o, e, t) => e in o ? x(o, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : o[e] = t;
var i = (o, e, t) => (f(o, typeof e != "symbol" ? e + "" : e, t), t);
class p extends HTMLElement {
  setStyles(e) {
    Object.keys(e).forEach((s) => {
      this.style[s] = e[s];
    });
  }
}
class r extends p {
  constructor() {
    super();
    i(this, "tag", r.tag);
    this.innerHTML = `
      <svg viewBox="0 0 24 24"><path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path></svg>
    `;
  }
}
r.tag = "onbotgo-bubble";
const w = {
  [r.tag]: {
    display: "grid",
    "place-items": "center",
    width: "48px",
    height: "48px",
    "background-color": "rgb(59, 129, 246)",
    fill: "transparent",
    "border-radius": "100px",
    transition: "transform 0.1s linear"
  },
  [`${r.tag}:hover`]: {
    transform: "scale(1.1)"
  },
  [`${r.tag} > svg`]: {
    width: "28px",
    height: "28px",
    stroke: "white",
    "stroke-width": "2px",
    "border-image-width": "2"
  }
};
class h extends p {
  constructor() {
    super(), this.setStyles({ display: "inline-block", width: "100%" });
  }
}
h.tag = "onbotgo-box";
class g extends p {
  constructor() {
    super();
    i(this, "defaultStyles", {
      height: "8%",
      width: "100%",
      display: "grid",
      gridTemplateColumns: "10fr 1fr",
      alignItems: "center",
      boxShadow: "0 2px 6px -1px rgba(0,0,0,.1)"
    });
    i(this, "input", document.createElement("input"));
    i(this, "sendIcon", new h());
    this.setStyles(this.defaultStyles), this.input, this.input.type = "text", this.input.placeholder = "Escribe un mensaje", this.sendIcon.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="19px" class="send-icon flex " style="fill: rgb(59, 129, 246);"><path d="M476.59 227.05l-.16-.07L49.35 49.84A23.56 23.56 0 0027.14 52 24.65 24.65 0 0016 72.59v113.29a24 24 0 0019.52 23.57l232.93 43.07a4 4 0 010 7.86L35.53 303.45A24 24 0 0016 327v113.31A23.57 23.57 0 0026.59 460a23.94 23.94 0 0013.22 4 24.55 24.55 0 009.52-1.93L476.4 285.94l.19-.09a32 32 0 000-58.8z"></path></svg>', this.appendChild(this.input), this.appendChild(this.sendIcon);
  }
  onSubmit(t) {
    this.sendIcon.onclick = (s) => t(this.input.value), this.input.onkeydown = (s) => {
      ["13", "Enter"].includes(s.key) && (t(this.input.value), this.input.value = "");
    };
  }
}
g.tag = "onbotgo-chatinput";
const C = {
  [`${g.tag} > input`]: {
    "border-radius": "6px",
    outline: "none",
    border: "none",
    height: "100%",
    padding: "0 10px"
  },
  [`${g.tag} svg`]: {
    cursor: "pointer"
  }
};
class v {
  constructor() {
    i(this, "typography", {
      primary: "Inter"
    });
    i(this, "colors", { primary: "rgb(59, 129, 246)" });
  }
}
const u = new v();
class c extends p {
  constructor(t) {
    super();
    i(this, "messageBox", new h());
    this.setStyles({
      width: "100%",
      display: "flex",
      minHeight: "max(45px,fit-content)",
      justifyContent: t.type === "userMessage" ? "flex-end" : "flex-start"
    });
    const s = {
      userMessage: "from-user",
      apiMessage: "from-chatbot"
    };
    if (this.messageBox.setStyles({
      width: "fit-content",
      height: "fit-content",
      borderRadius: "6px",
      display: "flex",
      alignItems: "center",
      padding: "15px 15px",
      maxWidth: "80%",
      fontFamily: u.typography.primary,
      color: t.type === "userMessage" ? "white" : "black"
    }), this.messageBox.classList.add(s[t.type]), this.messageBox.innerText = t.message, t.type !== "userMessage") {
      const n = new h();
      n.classList.add("bg-semi-transp"), this.messageBox.appendChild(n);
    }
    this.appendChild(this.messageBox);
  }
}
c.tag = "onbotgo-chatmessage";
const m = {
  [`${c.tag} > .from-chatbot`]: {
    width: "100%",
    content: "",
    overflow: "hidden",
    position: "relative"
  },
  [`${c.tag} > .from-chatbot > .bg-semi-transp`]: {
    position: "absolute",
    width: "100%",
    height: "100%",
    opacity: ".1",
    top: 0,
    left: 0,
    "background-color": u.colors.primary
  },
  [`${c.tag} > .from-user`]: {
    "background-color": u.colors.primary
  }
};
console.log(m);
class k {
  constructor() {
    i(this, "gpt_url", "https://api-whatsapp-dev.mibot.cl:7070");
    i(this, "chatflowID", "");
  }
}
const b = new k(), S = async (o) => await fetch(
  `${b.gpt_url}/v1/internal-prediction/${b.chatflowID}`,
  {
    headers: {
      "Content-Type": "application/json"
    },
    method: "POST",
    body: JSON.stringify(o)
  }
).then((e) => e.json());
class l extends p {
  constructor() {
    super();
    i(this, "tag", l.tag);
    i(this, "messagesHistory", [
      {
        message: "¡Hola! ¿En qué puedo ayudarte hoy?",
        type: "apiMessage"
      }
    ]);
    i(this, "messagesContainer", new h());
    i(this, "chatInput", new g());
    i(this, "defaultStyles", {
      visibility: "visible",
      bottom: "60px",
      right: "10px",
      position: "absolute",
      display: "inline-block",
      boxShadow: "rgba(0, 0, 0, 0.16) 0px 5px 40px",
      width: "400px",
      maxHeight: "704px",
      height: "70vh",
      backgroundColor: "white",
      borderRadius: "8px",
      padding: "10px 20px"
    });
    this.setStyles(this.defaultStyles), this.messagesContainer.setStyles({
      height: "88%",
      display: "flex",
      flexDirection: "column",
      gap: "10px",
      padding: "10px 0",
      overflowY: "scroll"
    }), this.chatInput.onSubmit(this.onSubmit.bind(this)), this.appendChild(this.messagesContainer), this.appendChild(this.chatInput), this.renderMessages(this.messagesHistory);
  }
  onSubmit(t) {
    if (t = t.trim(), !!t)
      try {
        const s = structuredClone(this.messagesHistory);
        s.splice(0, 1);
        const n = {
          history: s,
          question: t
        };
        this.addMessages([{ message: t, type: "userMessage" }]), S(n).then((a) => {
          if (!a.success)
            throw new Error(a.msg);
          a.data.process.length && a.data.process.forEach((d) => {
            this.addMessages([
              {
                message: d.content,
                type: d.role,
                name: d.name
              }
            ]);
          }), this.addMessages([
            { message: a.data.answer, type: "apiMessage" }
          ]);
        });
      } catch {
      }
  }
  toggle() {
    this.style.visibility = this.style.visibility === "visible" ? "hidden" : "visible";
  }
  renderMessages(t) {
    t.forEach(
      (s) => !["dataMessage"].includes(s.type) && this.messagesContainer.appendChild(new c(s))
    );
  }
  addMessages(t) {
    this.messagesHistory = this.messagesHistory.concat(t), this.renderMessages(t), console.log(this.messagesHistory);
  }
}
const M = {
  [`${l.tag}::-webkit-scrollbar-track`]: {
    "-webkit-box-shadow": "inset 0 0 6px rgba(0,0,0,0.3)",
    "border-radius": "10px",
    "background-color": "#F5F5F5"
  },
  [`${l.tag}::-webkit-scrollbar`]: {
    width: "12px",
    "background-color": "#F5F5F5"
  },
  [`${l.tag}::-webkit-scrollbar-thumb`]: {
    "border-radius": "10px",
    "-webkit-box-shadow": "inset 0 0 6px rgba(0,0,0,.3)",
    "background-color": " #D62929"
  }
};
l.tag = "onbotgo-chatcontainer";
class y extends p {
  constructor() {
    super();
    i(this, "componentStyles", {
      display: "inline-block",
      position: "absolute",
      bottom: "20px",
      right: "20px"
    });
    const t = new r(), s = new l();
    t.onclick = () => s.toggle(), this.appendChild(t), this.appendChild(s), this.setStyles(this.componentStyles);
  }
  connectedCallback() {
  }
}
y.tag = "onbotgo-chatbot";
function E(o, e = {}) {
  const t = Object.keys(e), s = Object.values(e);
  let n = `${o}{`;
  return t.forEach((a, d) => n += `${a}:${s[d]};`), n + "}";
}
function I(o) {
  const e = Object.keys(o);
  let t = "";
  e.forEach(
    (n) => t += E(
      n,
      o[n]
    )
  );
  const s = document.createElement("style");
  return s.innerHTML = t, s;
}
function $({ element: o, styles: e }) {
  const t = e.reduce(
    (s, n) => ({
      ...s,
      ...n
    }),
    {}
  );
  o.prepend(I(t));
}
class H {
  constructor() {
    i(this, "messages", []);
    this.registerComponents(
      y,
      r,
      l,
      c,
      g,
      h
    );
  }
  setConfig({ chatflow: e, theme: t }) {
    if (b.chatflowID = e, !t)
      return;
    const { typography: s, colors: n } = t;
    s && Object.keys(s).forEach(
      (a) => u.colors[a] = n[a]
    ), n && Object.keys(n).forEach(
      (a) => u.colors[a] = n[a]
    );
  }
  init() {
    const e = new y();
    $({
      element: e,
      styles: [
        w,
        M,
        m,
        C
      ]
    }), document.body.appendChild(e);
  }
  registerComponents(...e) {
    e.forEach((t) => customElements.define(t.tag, t));
  }
}
const B = new H();
export {
  B as default
};
