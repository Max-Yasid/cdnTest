var b = Object.defineProperty;
var m = (i, e, t) => e in i ? b(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t;
var n = (i, e, t) => (m(i, typeof e != "symbol" ? e + "" : e, t), t);
function x(i, e = {}) {
  const t = Object.keys(e), s = Object.values(e);
  let a = `${i}{`;
  return t.forEach((o, l) => a += `${o}:${s[l]};`), a + "}";
}
class h extends HTMLElement {
  setStyles(e) {
    Object.keys(e).forEach((s) => {
      this.style[s] = e[s];
    });
  }
}
class c extends h {
  constructor() {
    super();
    n(this, "tag", c.tag);
    n(this, "componentStyles", {
      display: "inline-block",
      position: "absolute",
      bottom: "20px",
      right: "20px"
    });
    this.addStyles({ [this.tag]: this.componentStyles });
  }
  addStyles(t) {
    const s = Object.keys(t);
    let a = "";
    s.forEach((l) => a += x(l, t[l]));
    let o = document.createElement("style");
    o.innerHTML = a, this.prepend(o);
  }
  connectedCallback() {
  }
}
c.tag = "onbotgo-chatbot";
class r extends h {
  constructor() {
    super();
    n(this, "tag", r.tag);
    this.innerHTML = `
      <svg viewBox="0 0 24 24"><path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path></svg>
    `;
  }
}
r.tag = "onbotgo-bubble";
const f = {
  [r.tag]: {
    display: "grid",
    "place-items": "center",
    width: "48px",
    height: "48px",
    "background-color": "rgb(59, 129, 246)",
    fill: "transparent",
    "border-radius": "100px",
    transition: "transform 0.1s linear"
  },
  [`${r.tag}:hover`]: {
    transform: "scale(1.1)"
  },
  [`${r.tag} > svg`]: {
    width: "28px",
    height: "28px",
    stroke: "white",
    "stroke-width": "2px",
    "border-image-width": "2"
  }
};
class u extends h {
  constructor() {
    super(), this.setStyles({ display: "inline-block", width: "100%" });
  }
}
u.tag = "onbotgo-box";
class d extends h {
  constructor() {
    super();
    n(this, "defaultStyles", {
      height: "8%",
      width: "100%",
      display: "grid",
      gridTemplateColumns: "10fr 1fr",
      alignItems: "center",
      boxShadow: "0 2px 6px -1px rgba(0,0,0,.1)"
    });
    n(this, "input", document.createElement("input"));
    n(this, "sendIcon", new u());
    this.setStyles(this.defaultStyles), this.input, this.input.type = "text", this.input.placeholder = "Escribe un mensaje", this.sendIcon.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="19px" class="send-icon flex " style="fill: rgb(59, 129, 246);"><path d="M476.59 227.05l-.16-.07L49.35 49.84A23.56 23.56 0 0027.14 52 24.65 24.65 0 0016 72.59v113.29a24 24 0 0019.52 23.57l232.93 43.07a4 4 0 010 7.86L35.53 303.45A24 24 0 0016 327v113.31A23.57 23.57 0 0026.59 460a23.94 23.94 0 0013.22 4 24.55 24.55 0 009.52-1.93L476.4 285.94l.19-.09a32 32 0 000-58.8z"></path></svg>', this.appendChild(this.input), this.appendChild(this.sendIcon);
  }
  onSubmit(t) {
    this.sendIcon.onclick = (s) => t(this.input.value), this.input.onkeydown = (s) => {
      ["13", "Enter"].includes(s.key) && (t(this.input.value), this.input.value = "");
    };
  }
}
d.tag = "onbotgo-chatinput";
const w = {
  [`${d.tag} > input`]: {
    "border-radius": "6px",
    outline: "none",
    border: "none",
    height: "100%",
    padding: "0 10px"
  },
  [`${d.tag} svg`]: {
    cursor: "pointer"
  }
};
class p extends h {
  constructor(t) {
    super();
    n(this, "messageBox", new u());
    this.setStyles({
      width: "100%",
      display: "flex",
      justifyContent: t.type === "userMessage" ? "flex-end" : "flex-start"
    });
    const s = {
      userMessage: "from-user",
      apiMessage: "from-chatbot"
    };
    this.messageBox.setStyles({
      width: "fit-content",
      borderRadius: "6px",
      display: "flex",
      alignItems: "center",
      padding: "15px 15px",
      maxWidth: "80%",
      color: t.type === "userMessage" ? "white" : "black"
    }), this.messageBox.classList.add(s[t.type]), this.messageBox.innerText = t.message, this.appendChild(this.messageBox);
  }
}
p.tag = "onbotgo-chatmessage";
const S = {
  [`${p.tag} > .from-chatbot`]: {
    "background-color": "rgba(59, 129, 246,.1)"
  },
  [`${p.tag} > .from-user`]: {
    "background-color": "rgb(59, 129, 246)"
  }
};
class C {
  constructor() {
    n(this, "gpt_url", "https://api-whatsapp-dev.mibot.cl:7070");
    n(this, "chatflowID", "");
  }
}
const y = new C(), v = async (i) => await fetch(
  `${y.gpt_url}/v1/internal-prediction/${y.chatflowID}`,
  {
    headers: {
      "Content-Type": "application/json"
    },
    method: "POST",
    body: JSON.stringify(i)
  }
).then((e) => e.json());
class g extends h {
  constructor() {
    super();
    n(this, "tag", g.tag);
    n(this, "messagesHistory", [
      {
        message: "¡Hola! ¿En qué puedo ayudarte hoy?",
        type: "apiMessage"
      }
    ]);
    n(this, "messagesContainer", new u());
    n(this, "chatInput", new d());
    n(this, "defaultStyles", {
      visibility: "visible",
      bottom: "60px",
      right: "10px",
      position: "absolute",
      display: "inline-block",
      boxShadow: "rgba(0, 0, 0, 0.16) 0px 5px 40px",
      width: "400px",
      maxHeight: "704px",
      height: "70vh",
      backgroundColor: "white",
      borderRadius: "8px",
      padding: "10px 20px"
    });
    this.setStyles(this.defaultStyles), this.messagesContainer.setStyles({
      height: "88%",
      display: "flex",
      flexDirection: "column",
      gap: "10px",
      padding: "10px 0"
    }), this.chatInput.onSubmit(this.onSubmit.bind(this)), this.appendChild(this.messagesContainer), this.appendChild(this.chatInput), this.renderMessages(this.messagesHistory);
  }
  onSubmit(t) {
    if (t = t.trim(), !!t)
      try {
        const s = structuredClone(this.messagesHistory);
        s.splice(0, 1);
        const a = {
          history: s,
          question: t
        };
        this.addMessages([{ message: t, type: "userMessage" }]), v(a).then((o) => {
          if (!o.success)
            throw new Error(o.msg);
          o.data.process.length && o.data.process.forEach((l) => {
            this.addMessages([
              { message: l.content, type: l.role }
            ]);
          }), this.addMessages([
            { message: o.data.answer, type: "apiMessage" }
          ]);
        });
      } catch {
      }
  }
  toggle() {
    this.style.visibility = this.style.visibility === "visible" ? "hidden" : "visible";
  }
  renderMessages(t) {
    t.forEach(
      (s) => !["dataMessage"].includes(s.type) && this.messagesContainer.appendChild(new p(s))
    );
  }
  addMessages(t) {
    this.messagesHistory = this.messagesHistory.concat(t), this.renderMessages(t), console.log(this.messagesHistory);
  }
}
g.tag = "onbotgo-chatcontainer";
class M {
  constructor() {
    n(this, "typography", "Inter");
    n(this, "colors", { primary: "rgb(59, 129, 246)" });
  }
}
const k = new M();
class I {
  constructor() {
    n(this, "messages", []);
    this.registerComponents(
      c,
      r,
      g,
      p,
      d,
      u
    );
  }
  setConfig({ chatflow: e, theme: { typography: t, colors: s } }) {
    y.chatflowID = e, t && (k.typography = t), console.log(e, y);
  }
  init() {
    const e = new c(), t = new r(), s = new g();
    this.registerStyles({
      widget: e,
      styles: [f, S, w]
    }), t.onclick = () => s.toggle(), e.appendChild(t), e.appendChild(s), document.body.appendChild(e);
  }
  registerStyles({ widget: e, styles: t }) {
    const s = t.reduce((a, o) => ({ ...a, ...o }), {});
    e.addStyles(s);
  }
  registerComponents(...e) {
    e.forEach((t) => customElements.define(t.tag, t));
  }
}
const H = new I();
export {
  H as chatbot
};
